{"version":3,"file":"static/js/786.ae66eb5b.chunk.js","mappings":"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","sources":["webpack://react-kabzda-2/./src/components/Profile/Profile.module.css?b512","webpack://react-kabzda-2/./src/components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css?a7c9","components/Profile/MyPosts/ProfileInfo/ProfileStatus.jsx","components/Profile/MyPosts/ProfileInfo/ProfileStatusContainer.jsx","components/Profile/MyPosts/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/MyPosts/ProfileInfo/ProfileDataForm.jsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.jsx","webpack://react-kabzda-2/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://react-kabzda-2/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","components/common/formsControl/formsControl.js","utils/validator/validator.js","webpack://react-kabzda-2/./src/components/common/formsControl/formsControl.module.css?eeb5"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__IU+n2\",\"item\":\"Profile_item__ejbm-\"};","// extracted by mini-css-extract-plugin\nexport default {\"description_block\":\"ProfileInfo_description_block__8mNr5\",\"item\":\"ProfileInfo_item__PnUmG\",\"avatar\":\"ProfileInfo_avatar__m+R+G\",\"backgroung_profile\":\"ProfileInfo_backgroung_profile__eo0Fs\",\"contact\":\"ProfileInfo_contact__4szZe\",\"formErrorDiv\":\"ProfileInfo_formErrorDiv__7c2St\"};","import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\n\r\nclass ProfileStatus extends React.Component{\r\n    //newStatus = React.createRef();\r\n    //локальний стейт для компоненті\r\n    state={\r\n        editMode:false,\r\n        status:this.props.status\r\n    }\r\n    activateMode(){\r\n        \r\n      this.setState({\r\n        editMode:true\r\n      })  \r\n    }\r\n    deActivateMode(){\r\n        \r\n        this.setState({\r\n          editMode:false\r\n        })  \r\n        this.props.updateStatusTC(this.state.status);\r\n      }\r\n      onChangeStatus(e){\r\n        let text = e.currentTarget.value;// вместо ref\r\n        this.setState({\r\n            status:text\r\n\r\n          })  \r\n        //this.props.onChangeStatusAC(text)//redux автоматично делает callback\r\n      }\r\n    componentDidUpdate(PrevProps,PrevState){\r\n        if(PrevProps.status !== this.props.status){\r\n            this.setState({\r\n                status:this.props.status\r\n    \r\n              })\r\n        }\r\n    }\r\n    render(){\r\n        return <div >\r\n        {!this.state.editMode ?<span onDoubleClick={this.activateMode.bind(this)}>{this.props.status?this.props.status:\"Введіть статус\"}</span>\r\n\r\n\r\n        :<input autoFocus  onChange={this.onChangeStatus.bind(this)} onBlur={this.deActivateMode.bind(this)} value={this.state.status} type=\"text\" />}\r\n        \r\n        </div>\r\n    }\r\n}\r\n\r\nconst ProfileStatusF=(props)=>{\r\n    return(\r\n        <Field autoFocus onBlur={props.deActivateMode}\r\n         name={'statusInput'} component={'input'} />\r\n    )\r\n}\r\nconst ProfileStatusRF=reduxForm({form:'statusForm'})(ProfileStatusF);\r\nexport default ProfileStatus;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport { onChangeStatusAC } from \"../../../../redux/profile_reducer\";\r\n\r\nlet mapStateToProps=(state)=>{\r\n  return {\r\n    status:state.profilePage.statusText\r\n  }\r\n   \r\n}\r\n\r\nexport default connect(mapStateToProps,{\r\n  onChangeStatusAC})(ProfileStatus);","import React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\n;\r\nconst ProfileStatusWithHooks =(props)=>{\r\n    //let stateWithSetState = useState(true);\r\n    //let editMode=stateWithSetState[0];\r\n    //let setEditMode=stateWithSetState[1];\r\n    let [editMode,setEditMode]=useState(false)\r\n    let [status,setStatus]=useState(props.status)\r\n    useEffect(()=>{\r\n      setStatus(props.status)\r\n    },[props.status])\r\n    const activateMode=()=>{\r\n      setEditMode(true)\r\n    }\r\n    const deActivateMode=()=>{\r\n      setEditMode(false)\r\n      props.updateStatusTC(status);\r\n    }\r\n    const onChangeStatus=(e)=>{\r\n      setStatus(e.currentTarget.value)\r\n      \r\n    }\r\n        return <div >\r\n        { !editMode?<span onDoubleClick={activateMode} >\r\n          {props.status?props.status:\"Введіть статус\"}\r\n          </span>\r\n\r\n\r\n        :<input autoFocus onChange={onChangeStatus} onBlur={deActivateMode} \r\n        value={status}  type=\"text\" />}\r\n        \r\n        </div>\r\n    }\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import { reduxForm } from \"redux-form\"\r\nimport { CreateForm, Input, TextArea } from \"../../../common/formsControl/formsControl\"\r\nimport { Contact } from \"./ProfileInfo\"\r\nimport c from \"./ProfileInfo.module.css\"\r\nconst ProfileDataForm =({handleSubmit,isOwner,profile,error})=>{\r\n    return <form onSubmit={handleSubmit}>\r\n                {isOwner &&<div><button >Complete</button></div>}\r\n                {error && <div className={c.formErrorDiv}>\r\n                    {error}\r\n                </div>\r\n                }\r\n                <div >\r\n                    <b>Your Name</b>: {CreateForm(\"fullName\",\"fullName\",Input,[])}\r\n                </div>\r\n                <div>\r\n                    <b>About you</b>: {CreateForm(\"aboutMe\",\"about you\",Input,[])}\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a job</b>: {CreateForm(\"lookingForAJob\",\"\",Input,[],{type:\"checkbox\"})}\r\n                </div>\r\n                <div>\r\n                    <b>My professional skills</b>:{CreateForm(\"lookingForAJobDescription\",\"Your professional skills\",TextArea,[])}\r\n                </div>\r\n                <div>\r\n                    <b>Contacts</b>\r\n                    {Object.keys(profile.contacts).map((key)=>{\r\n                    \r\n                        return <div key={key} className={c.contact}>\r\n                            <b>{key}:</b>{CreateForm(\"contacts.\"+ key,key,Input)}\r\n                        </div>\r\n                        \r\n                    })}\r\n                </div>\r\n            </form>\r\n}\r\nconst ProfileDataFormReduxForm = reduxForm({form:'edit-profile'})(ProfileDataForm)\r\nexport default ProfileDataFormReduxForm","import React, { useState } from \"react\";\r\nimport c from'./ProfileInfo.module.css';\r\nimport Preloader from \"../../../common/preloader/preloader\";\r\nimport defaultIcon from \"./../../../../img/defaultIcon.png\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport ProfileStatusContainer from \"./ProfileStatusContainer\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport ProfileDataFormReduxForm from \"./ProfileDataForm\";\r\nconst ProfileInfo = (props) =>{\r\n    const [editMode,setEditMode]=useState(false);\r\n\r\n    const onSubmit = async (formData) => {\r\n        \r\n        props.saveProfile(formData).then(()=>{\r\n            setEditMode(false);\r\n        })\r\n        \r\n        \r\n    };\r\n    const PhotoSelected=(e)=>{\r\n        if(e.target.files.length){\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    if(!props.profile){\r\n        return <Preloader />\r\n    }\r\n    else{\r\n        \r\n        return(\r\n            \r\n            <div>\r\n               <img className={c.backgroung_profile} src='https://img.freepik.com/free-photo/landscape-of-morning-fog-and-mountains-with-hot-air-balloons-at-sunrise_335224-794.jpg?size=626&ext=jpg&ga=GA1.1.1546980028.1703721600&semt=sph'  />\r\n           \r\n               <div className={c.description_block}>\r\n                    <div>\r\n                        <img src={props.profile.photos.large || defaultIcon } className={c.avatar}/>\r\n                    </div>\r\n                    <div>\r\n                        {props.isOwner && <input type=\"file\" onChange={PhotoSelected}/>}\r\n                    </div>\r\n                    \r\n                    {props.profile.fullName===null ? 'Name':props.profile.fullName}\r\n                    <div>\r\n                    <ProfileStatusWithHooks status={props.status} updateStatusTC={props.updateStatusTC} />\r\n                    </div>\r\n                    {editMode ?<ProfileDataFormReduxForm initialValues={props.profile}\r\n                    profile={props.profile}  \r\n                    onSubmit={onSubmit}\r\n                    isOwner={props.isOwner}\r\n                    setEditMode={setEditMode}/>:\r\n                    <ProfileData profile={props.profile} isOwner={props.isOwner}\r\n                    setEditMode={setEditMode}/>}\r\n                    \r\n                    \r\n               </div>\r\n            </div>\r\n           \r\n    \r\n         \r\n       \r\n       );\r\n    }\r\n    \r\n}\r\nconst ProfileData =(props)=>{\r\n    return <div>\r\n                {props.isOwner &&<div><button onClick={()=>props.setEditMode(true)}>Edit</button></div>}\r\n                \r\n                {!props.profile.aboutMe ? 'About me':props.profile.aboutMe}\r\n               \r\n                <div>\r\n                    <b>Looking for a job</b>: {props.profile.lookingForAJob ? \"YES\":\"NO\"}\r\n                </div>\r\n                <div>\r\n                    <b>My professional skills</b>: {!props.profile.lookingForAJobDescription?'dont have':props.profile.lookingForAJobDescription}\r\n                </div>\r\n                <div>\r\n                    <b>Contacts</b>\r\n                    {Object.keys(props.profile.contacts).map((key)=>{\r\n                        return <Contact key={key} contactTitle={key}\r\n                        contactValue={props.profile.contacts[key]}\r\n                        />\r\n                    })}\r\n                    \r\n                </div>\r\n            </div>\r\n}\r\n\r\nexport const Contact =(props)=>{\r\n    return !props.contactValue ? \"\":<div className={c.contact}>\r\n        \r\n    <b>{props.contactTitle}</b>: {props.contactValue} \r\n</div>\r\n        \r\n}\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MyPosts_content__2T5Mh\",\"item\":\"MyPosts_item__flEDv\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__9DbPL\"};","import React from \"react\";\r\nimport c from'./Post.module.css';\r\nconst Post = (props) =>{\r\n    return(\r\n      \r\n         \r\n      \r\n        <div className={c.item}>\r\n          <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQg8gaNRMVq9hltpqT_lMVJ7AfWUaUMXl_Yig&usqp=CAU\" alt=\"\" />\r\n          <span>{props.message}</span>\r\n          <p>{props.likeCount} LIKES</p>\r\n          </div>\r\n\r\n      \r\n    \r\n    );\r\n}\r\nexport default Post;","import React, { Component, PureComponent } from \"react\";\r\nimport c from'./MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport { PostChangeActionCreator, addPostActionCreator } from \"../../../redux/profile_reducer\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator, minLengthCreator, required } from \"../../../utils/validator/validator\";\r\nimport { TextArea } from \"../../common/formsControl/formsControl\";\r\n\r\nconst MyPosts=(props)=>{\r\n  /*shouldComponentUpdate(nextProps, nextState) {\r\n    \r\n    return this.props.value !== nextProps.value //|| this.state !== nextState; \r\n   }*/\r\n\r\n    let postsElements = [...props.state.postData].reverse().map((el) => (\r\n      <Post message={el.message} key={el.id} likeCount={el.likeCount} />\r\n    ));\r\n    let addPost =(formData)=>{\r\n    //console.log(formData.postText);\r\n    props.addPost(formData.postText)\r\n\r\n//props.changeInput('');\r\n}\r\n  let newPostElement=React.createRef();\r\n    return(\r\n      \r\n      <div className={c.content}>\r\n      \r\n        <div><h3>My posts</h3></div>\r\n        <MyPostRF onSubmit={addPost}/>\r\n        <div className={c.posts}>\r\n          {postsElements}\r\n        </div>\r\n      \r\n    </div>\r\n    \r\n    );\r\n  }\r\n \r\n\r\nconst MyPostForm=(props)=>{\r\n  return(\r\n    <form onSubmit={props.handleSubmit}>\r\n       <div>\r\n            <Field component={TextArea}  name=\"postText\" validate={[required,maxLengthCreator(120),]}/>\r\n        </div>\r\n        <div><button >Add post</button></div>\r\n    </form>\r\n  )\r\n}\r\nconst MyPostRF = React.memo(reduxForm({ form: 'postForm' })(MyPostForm));\r\nexport default MyPosts;","import React from \"react\";\r\nimport c from'./MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport { PostChangeActionCreator, addPostActionCreator } from \"../../../redux/profile_reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\n\r\nlet mapStateToProps=(state)=>{\r\n   return{\r\n      state: state.profilePage,\r\n   }\r\n}\r\nlet mapDispatchToProps=(dispatch)=>{\r\n   return{\r\n     \r\n      addPost:(text) => {\r\n         dispatch(addPostActionCreator(text))\r\n      },\r\n   }\r\n}\r\nconst MyPostsContainer= connect(mapStateToProps,mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport c from'./Profile.module.css';\r\nimport ProfileInfo from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nconst Profile = (props) =>{\r\n  \r\n    return(\r\n      <div className={c.content}>\r\n      \r\n      <ProfileInfo isOwner={props.isOwner} profile={props.profile}\r\n      savePhoto={props.savePhoto}\r\n      saveProfile={props.saveProfile}\r\n       status={props.status} updateStatusTC={props.updateStatusTC}/>\r\n      <MyPostsContainer />\r\n      \r\n    </div>\r\n    \r\n    );\r\n    \r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport { getUserProfileTC, onSetStatusTC, savePhoto, saveProfile, updateStatusTC } from \"../../redux/profile_reducer\";\r\nimport {\r\n  useLocation,\r\n  useNavigate,\r\n  useParams,\r\n} from \"react-router-dom\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nclass ProfileContainer extends React.Component {\r\n   refreshProfile(){\r\n    \r\n    let userId = this.props.router.params.userId;\r\n    //let userId = 20000;\r\n    if(!userId ){\r\n      userId=this.props.id;\r\n      if(!userId){\r\n        this.props.history.push('/login')\r\n      }\r\n    }\r\n    this.props.getUserProfileTC(userId)\r\n    this.props.onSetStatusTC(userId);\r\n    }\r\n    componentDidMount(){\r\n      this.refreshProfile();\r\n    }\r\n   \r\n    componentDidUpdate(prevProps, prevState) { \r\n      if( this.props.router.params.userId != prevProps.router.params.userId){\r\n        this.refreshProfile();\r\n      }\r\n\r\n    }\r\n    \r\n    render(){\r\n      return  <Profile {...this.props}\r\n        isOwner={!this.props.router.params.userId}\r\n       profile={this.props.profile} status={this.props.status} updateStatusTC={this.props.updateStatusTC}/>\r\n      \r\n    }\r\n      \r\n    \r\n    \r\n}\r\n\r\nlet mapStateToProps=(state)=>{\r\n  \r\n  return({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.statusText,\r\n  id: state.auth.id,\r\n  isAuth:state.auth.isAuth\r\n})};\r\n//снизу работает как withRouter\r\nfunction withRouter(Component) {\r\n  function ComponentWithRouterProp(props) {\r\n      let location = useLocation();\r\n      let navigate = useNavigate();\r\n      let params = useParams();\r\n      return (\r\n          <Component\r\n              {...props}\r\n              router={{ location, navigate, params }}\r\n          />\r\n      );\r\n  }\r\n\r\n  return ComponentWithRouterProp;\r\n}\r\n\r\n\r\nexport default compose(\r\n  connect(mapStateToProps,{getUserProfileTC,onSetStatusTC,updateStatusTC,savePhoto,saveProfile}),\r\n  withRouter,\r\n  withAuthRedirect,\r\n)(ProfileContainer)","import React from \"react\";\r\nimport c from './formsControl.module.css'\r\nimport { Field } from \"redux-form\";\r\n\r\n\r\n/*\r\n\r\nexport const FormController=({input,meta,child,...props})=>{\r\n    const hasError = meta.touched && meta.error;\r\n    return <div className={c.formСontrol+' '+ (hasError && c.error)}>\r\n                <div> \r\n                    <props.element {...input} {...props}/>\r\n                </div>\r\n                {hasError&& <span>{meta.error}</span>}\r\n    </div>\r\n}\r\n\r\nexport const TextArea=({...props})=>{\r\n    return <FormController {...props} element=\"textarea\"></FormController>\r\n}\r\nexport const Input=({meta,...props})=>{\r\n    return <FormController {...props} element=\"input\"></FormController>\r\n}\r\n*/\r\n\r\nexport const TextArea=({input,meta,...props})=>{\r\n    const hasError = meta.touched && meta.error;\r\n    return <div className={c.formСontrol+' '+ (hasError && c.error)}>\r\n                <div>\r\n                    <textarea {...input} {...props}/>   \r\n                </div>\r\n                {hasError&& <span>{meta.error}</span>}\r\n    </div>\r\n}\r\nexport const Input=({input,meta,...props})=>{\r\n    const hasError = meta.touched && meta.error;\r\n    return <div className={c.formСontrol+' '+ (hasError && c.error)}>\r\n                <div>\r\n                    <input {...input} {...props}/>   \r\n                </div>\r\n                {hasError&& <span>{meta.error}</span>}\r\n    </div>\r\n}\r\nexport const CreateForm=(name,placeholder,component,validate,props={},text='')=><div>\r\n    <Field name={name} placeholder={placeholder}\r\n     component={component} validate={validate} {...props} />{text}\r\n</div>\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n)","export const required= value =>{\r\n    if(value) return undefined;\r\n    return \"Field is required\"\r\n}\r\n/*\r\nexport const maxLength30=value=>{\r\n    if(value&& value.length>30) return \"Max simvol 30\";\r\n    return undefined\r\n}\r\n*/\r\nexport const maxLengthCreator=(maxLength)=>(value)=>{\r\n    if(value&& value.length>maxLength) return `Max symbol ${maxLength}`;\r\n    return undefined\r\n}\r\nexport const minLengthCreator=(minLength)=>(value)=>{\r\n    if(value&& value.length<minLength) return `Min symbol ${minLength}`;\r\n    return undefined\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"formsControl_formControl__8tjrF\",\"formСontrol\":\"formsControl_formСontrol__HovIe\",\"error\":\"formsControl_error__aNckz\",\"formErrorDiv\":\"formsControl_formErrorDiv__V0-P4\"};"],"names":["ProfileStatus","React","constructor","arguments","state","editMode","status","this","props","activateMode","setState","deActivateMode","updateStatusTC","onChangeStatus","e","text","currentTarget","value","componentDidUpdate","PrevProps","PrevState","render","_jsx","children","autoFocus","onChange","bind","onBlur","type","onDoubleClick","reduxForm","form","Field","name","component","connect","profilePage","statusText","onChangeStatusAC","setEditMode","useState","setStatus","useEffect","_ref","handleSubmit","isOwner","profile","error","_jsxs","onSubmit","className","c","CreateForm","Input","TextArea","Object","keys","contacts","map","key","ProfileData","onClick","aboutMe","lookingForAJob","lookingForAJobDescription","Contact","contactTitle","contactValue","async","saveProfile","formData","then","PhotoSelected","target","files","length","savePhoto","src","photos","large","defaultIcon","fullName","ProfileStatusWithHooks","ProfileDataFormReduxForm","initialValues","Preloader","alt","message","likeCount","MyPostRF","validate","required","maxLengthCreator","postsElements","postData","reverse","el","Post","id","content","addPost","postText","posts","dispatch","addPostActionCreator","MyPosts","ProfileInfo","MyPostsContainer","ProfileContainer","refreshProfile","userId","router","params","history","push","getUserProfileTC","onSetStatusTC","componentDidMount","prevProps","prevState","Profile","compose","auth","isAuth","Component","location","useLocation","navigate","useNavigate","useParams","withAuthRedirect","input","meta","hasError","touched","formСontrol","_ref2","placeholder","undefined","maxLength","concat","minLengthCreator","minLength"],"sourceRoot":""}